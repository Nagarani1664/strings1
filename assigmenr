
1q)Input a string of size n and update all the odd positions in the string to character ‘#’. Consider
0-based indexing.
#include <iostream>
#include<string>
using namespace std;
int main() {
   string s;
   getline(cin,s);
    int i=0;
    while(s[i]!='\0'){
        if(i%2!=0) s[i]='#';
        i++;
    }
    cout<<s<<endl;
    return 0;
}



2)Input a string of length n and count all the consonants in the given string.
#include <iostream>
#include<string>
using namespace std;
int main() {
   string s;
   getline(cin,s);
   int count=0;
   for(int i=0;s[i]!='\0';i++){
       if(s[i]=='a' || s[i]=='e' || s[i]=='o' || s[i]=='i'  || s[i]=='u' )  continue ;
       else count++;
   }
   cout<<count;
    
}




4qInput a string of even length and reverse the second half of the string.
#include <bits/stdc++.h>
using namespace std;
int main(){
    string s;
    getline(cin,s);
    int n = s.length();
    reverse(s.begin()+n/2,s.end());
    cout<<s;
}





  5q)Input a string of length less than 10 and convert it into integer without using builtin function.
#include<iostream>
using namespace std;
int main() {
    string s;
    cin>>s;
    int x=0;
    int n= s.length();
    for(int i=0;i<n;i++){
        x=x*10;
        x= x+(s[i]-48);
    }
    cout<<x;
    return 0;
}






5q)Check whether the given string is palindrome or not.
#include <iostream>
using  namespace std;


int main() {
     string s;
     cin>>s;
     string temp;
     temp=s;
     int n=s.length();
     int i=0,j=n-1;
     
     while(s[i]!='\0'){
         if(s[i] == s[j]) {
             temp[i]=s[i];
         }
         i++;
         j--;
         
     }
      cout<<temp;
     cout<<s<<endl;
     if(temp==s) cout<<"palindrome";
     else cout<<"not palindrome";
    return 0;
}
